package Algorithm.Bitoperation.p522;

/**
 * \* Created with IntelliJ IDEA.
 * \* User: LinZiYu
 * \* Date: 2020/5/22
 * \* Time: 20:30
 * \* Description:
 * \
 */
public class T2 {

    //异或是一种基于二进制的位运算，
    // 用符号XOR或者 ^ 表示，
    // 其运算法则是对运算符两侧数的每一个二进制位，同值取0，异值取1。

    //异或运算最常见于多项式除法，
    // 不过它最重要的性质还是自反性：
    // A XOR B XOR B = A，即对给定的数A，
    // 用同样的运算因子（B）作两次异或运算后仍得到A本身
    // 。这是一个神奇的性质，利用这个性质，可以获得许多有趣的应用
    // 。 例如，所有的程序教科书都会向初学者指出
    // ，要交换两个变量的值，必须要引入一个中间变量。
    // 但如果使用异或，就可以节约一个变量的存储空间：
    // 设有A,B两个变量，存储的值分别为a，b，
    // 则以下三行表达式将互换他们的值 表达式 （值） ：




    //^是异或运算符，异或的规则是转换成二进制比较，相同为0，不同为1.
    //一个数a与另一个数b异或的结果等于a^b，用结果（ a^b)异或a，就会得到b；
    //上面的结果，我们用代码来验证。代码( a=a^b; b=a^b; a=a^b;)可以转换成这样。
    //int c=a^b ; ------------ 01=10^11 得到结果C（ a^b)
    //b=c^b; ------------ 10=01^11 用结果（ a^b)异或a，就会得到b；
    //a=c^a; -------------11=01^10 用结果（ a^b)异或b，就会得到a；

    public static void main(String[] args) {
        int a=2;
        int b=3;
        a=a^b;
        b=a^b;
        a=a^b;
        System.out.println("a="+a+",b="+b);

//a=3,b=2


    }
}
